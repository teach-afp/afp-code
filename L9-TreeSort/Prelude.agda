-- Advanced Functional Programming course 2024
-- Chalmers TDA342 / GU DIT260
--
-- Introduction to Agda
--
-- File 1: The Curry-Howard Isomorphism

{-# OPTIONS --allow-unsolved-metas #-}

module Prelude where

-- Natural numbers as our first example of
-- an inductive data type.

data ‚Ñï : Set where
  zero : ‚Ñï
  suc  : (n : ‚Ñï) ‚Üí ‚Ñï

-- M-x set-input-method RET Agda RET
-- \ b N

plus : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï   -- \ t o
plus zero    y = zero
plus (suc x) y = plus x (suc y)

-- C-c C-l load
-- C-c C-c case split
-- C-c C-, goal & hypotheses
-- C-c C-. goal & hypotheses & term
-- C-c C-SPC give

-- To use decimal notation for numerals, like
-- 2 instead of (suc (suc zero)), connect it
-- to the built-in natural numbers.

{-# BUILTIN NATURAL ‚Ñï #-}

-- Lists are a parameterized inductive data type.

data List (A : Set) : Set where
  []  : List A
  _‚à∑_ : (x : A) (xs : List A) ‚Üí List A   -- C-\ : :
        -- A ‚Üí List A ‚Üí List A
        -- A ‚Üí List A ‚Üí List A
        -- (x : A) ‚Üí List A ‚Üí List A
        -- (x : A) ‚Üí (xs : List A) ‚Üí List A
        -- (x : A) (xs : List A) ‚Üí List A

infixr 6 _‚à∑_

-- infix 4 if_then_else_  _[_!_]foo

-- C-c C-l   load

-- Disjoint sum type A ‚äé B (sometimes written A + B).

data _‚äé_ (A B : Set) : Set where  -- \uplus
  inl : A ‚Üí A ‚äé B
  inr : B ‚Üí A ‚äé B

infixr 4 _‚äé_

-- Curry-Howard-Isomorphism, Brouwer-Heyting-Kolmogorov Interpretation:
-- A proposition is the set of its proofs (aka Propositions-as-Types).

-- Proposition | Type/structure
-------------------------------
--   A ‚à® B     |   A ‚äé B
--   A ‚àß B     |   A √ó B
--   A ‚áí B     |   A ‚Üí B
--   False     |   Empty
--   True      |   Unit

-- The empty sum is the type with 0 alternatives,
-- which is the empty type.
-- By the Curry-Howard-Isomorphism,
-- which views a proposition as the set/type of its proofs,
-- it is also the absurd proposition.

data False : Set where

‚ä•-elim : False ‚Üí {A : Set} ‚Üí A
‚ä•-elim ()

-- C-c C-SPC give
-- C-c C-, show hypotheses and goal
-- C-c C-. show hypotheses and infers type

-- Tuple types

-- The generic record type with two fields
-- where the type of the second depends on the value of the first
-- is called Sigma-type (or dependent sum), in analogy to
--
--   Œ£ ‚Ñï B =  Œ£   B(n) = B(0) + B(1) + ...
--           n ‚àà ‚Ñï

record Œ£ (A : Set) (B : A ‚Üí Set) : Set where  -- \GS  \Sigma
  constructor _,_
  field  fst : A
         snd : B fst
open Œ£

infixr 5 _,_

-- The non-dependent version is the ordinary Cartesian product.

_√ó_ : (A B : Set) ‚Üí Set
A √ó B = Œ£ A (Œª _ ‚Üí B)

infixr 5 _√ó_

-- The record type with no fields has exactly one inhabitant
-- namely the empty tuple record{}
-- By Curry-Howard, it corresponds to Truth, as
-- no evidence is needed to construct this proposition.

record True : Set where

test : True
test = record {}

-- C-c C-a auto

-- Example: distributivity  A ‚àß (B ‚à® C) ‚Üí (A ‚àß B) ‚à® (A ‚àß C)

dist : ‚àÄ{A B C : Set} ‚Üí A √ó (B ‚äé C) ‚Üí (A √ó B) ‚äé (A √ó C)
dist (a , inl x) = inl (a , x)
dist (a , inr x) = inr (a , x)

-- Predicate on ‚Ñï is an element ‚Ñï ‚Üí Set

-- Relations

-- Type-theoretically, the type of relations ùìü(A√óA) is
--
--   A √ó A ‚Üí Prop
--
-- which is
--
--   A √ó A ‚Üí Set
--
-- by the Curry-Howard-Isomorphism
-- and
--
--   A ‚Üí A ‚Üí Set
--
-- by currying.

Rel : (A : Set) ‚Üí Set‚ÇÅ
Rel A = A ‚Üí A ‚Üí Set

-- Less-or-equal on natural numbers

_‚â§_ : Rel ‚Ñï
zero  ‚â§ y     = True
suc x ‚â§ zero  = False
suc x ‚â§ suc y = x ‚â§ y

-- C-c C-l load
-- C-c C-c case split
-- C-c C-, show goal and assumptions
-- C-c C-. show goal and assumptions and current term
-- C-c C-SPC give

2-leq-3 : 2 ‚â§ 3
2-leq-3 = _

-- C-c C-= constraint
